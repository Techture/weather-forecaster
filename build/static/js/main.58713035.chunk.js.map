{"version":3,"sources":["views/layout/Header.js","apis/config.js","apis/secret.js","utils/FetchWeatherData.js","components/Tagline.js","components/UpdateCityName.js","components/CitySelector.js","utils/DateTime.js","views/CurrentWeatherView.js","views/CurrentWeather.js","utils/FormatTime.js","components/Accordion.js","views/DailyWeatherView.js","views/DailyWeather.js","views/HourlyWeatherView.js","views/HourlyWeather.js","components/Weather.js","views/layout/Footer.js","views/Main.js","views/App.js","index.js"],"names":["Header","className","API_KEY","FetchWeatherData","lat","lon","setWeatherData","a","axios","data","console","log","Tagline","UpdateCityName","cityName","setUserLocation","newUserLocation","name","CitySelector","onSearch","userLocation","useEffect","localUserLocation","localStorage","getItem","JSON","parse","setItem","stringify","FormControl","placeholder","onChange","event","target","value","onKeyDown","keyCode","preventDefault","updateCityName","Button","onClick","DateTime","date","Date","toLocaleDateString","toLocaleTimeString","CurrentWeather","city","temp","feels_like","conditions","icon","src","alt","currentWeather","weather","main","roundedTemp","Math","round","roundedFeelsLike","CurrentWeatherView","FormatTime","timestamp","timezone","formatType","moment","tz","format","Accordion","children","title","isExpand","useState","expand","setExpand","DailyWeatherView","dailyWeather","roundTemp","tempToRound","length","map","day","idx","key","dateToFormat","dt","timeToFormat","max","min","DailyWeather","HourlyWeather","hourlyWeather","hour","HourlyWeatherList","Weather","current","daily","hourly","Footer","href","rel","Main","zip","weatherData","geolocationLoaded","setGeolocationLoaded","fetchWeatherData","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58713035.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <div className=\"header\">\r\n    <h1 className=\"header-title\">\r\n      Weather Forecaster <i className=\"fas\">&#xf6c4;</i>\r\n    </h1>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import { apiKey } from \"./secret\";\r\n\r\nexport const API_KEY = [apiKey]; //your api key goes here\r\nexport const API_BASE_URL = \"https://api.openweathermap.org/\";\r\n","export const apiKey = \"ae9496e6db273563f4d6d617dc6f1322\";\r\n","import { API_KEY, API_BASE_URL } from \"../apis/config\";\r\nimport axios from \"axios\";\r\n\r\nconst FetchWeatherData = async (lat, lon, setWeatherData) => {\r\n  try {\r\n    const { data } = await axios(\r\n      `${API_BASE_URL}/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=imperial`\r\n    );\r\n    setWeatherData(data);\r\n  } catch (error) {\r\n    console.log(\"Error: Fetch Weather >>\", error);\r\n  }\r\n};\r\n\r\nexport default FetchWeatherData;\r\n","import React from \"react\";\r\n\r\nconst Tagline = () => (\r\n  <div className=\"tagline\">\r\n    <p>Enter a city to view weather</p>\r\n  </div>\r\n);\r\n\r\nexport default Tagline;\r\n","import { API_KEY, API_BASE_URL } from \"../apis/config\";\r\nimport axios from \"axios\";\r\n\r\nexport const UpdateCityName = async (cityName, setUserLocation) => {\r\n  try {\r\n    const { data } = await axios(\r\n      `${API_BASE_URL}geo/1.0/direct?q=${cityName}&limit=1&appid=${API_KEY}`\r\n    );\r\n\r\n    const newUserLocation = {\r\n      lat: data[0].lat,\r\n      lon: data[0].lon,\r\n      name: data[0].name,\r\n    };\r\n\r\n    console.log(\"new user location >>\", newUserLocation);\r\n    setUserLocation(newUserLocation);\r\n  } catch (error) {\r\n    console.log(\"Error: Updating City Name >> \", error);\r\n  }\r\n};\r\n\r\nexport default UpdateCityName;\r\n","import React, { useEffect } from \"react\";\r\nimport Tagline from \"./Tagline\";\r\nimport updateCityName from \"./UpdateCityName\";\r\nimport { FaArrowRight } from \"react-icons/fa\";\r\nimport { FormControl, Button } from \"react-bootstrap\";\r\n\r\nconst CitySelector = ({ onSearch, userLocation, setUserLocation }) => {\r\n  useEffect(() => {\r\n    const localUserLocation = localStorage.getItem(\"user location\");\r\n\r\n    if (localUserLocation) {\r\n      setUserLocation(JSON.parse(localUserLocation));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"user location\", JSON.stringify(userLocation));\r\n  });\r\n\r\n  const onKeyDown = (event) => {\r\n    if (event.keyCode === 13) {\r\n      event.preventDefault();\r\n      updateCityName(userLocation.name, setUserLocation);\r\n      onSearch(userLocation.lat, userLocation.lon);\r\n      setUserLocation(userLocation);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-search\">\r\n      <Tagline />\r\n      <FormControl\r\n        className=\"weather-search-form weather-search-input\"\r\n        placeholder=\"Enter a city\"\r\n        name={userLocation.name}\r\n        onChange={(event) =>\r\n          setUserLocation({ ...userLocation, name: event.target.value })\r\n        }\r\n        value={userLocation.name || \"\"}\r\n        onKeyDown={onKeyDown}\r\n      />\r\n      <div className=\"weather-search-submit\">\r\n        <Button\r\n          className=\"weather-search-button\"\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            onSearch(userLocation.lat, userLocation.lon);\r\n            updateCityName(setUserLocation);\r\n          }}\r\n        >\r\n          <FaArrowRight />{\" \"}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CitySelector;\r\n","import React from \"react\";\r\n\r\nconst DateTime = () => {\r\n  const date = new Date();\r\n\r\n  return (\r\n    <div className=\"date-time\">\r\n      As of {`${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateTime;\r\n","import React from \"react\";\r\nimport DateTime from \"../utils/DateTime\";\r\n\r\nconst CurrentWeather = ({ city, temp, feels_like, conditions, icon }) => {\r\n  return (\r\n    <div className=\"current-weather-data\">\r\n      <span className=\"current-weather-tagline\">\r\n        <p className=\"current-weather-data-city\">Current Forecast | {city}</p>\r\n      </span>\r\n      <DateTime />\r\n      <div className=\"weather-data-box\">\r\n        <span className=\"weather-data-property\">\r\n          <p className=\"weather-data-title\">Temp</p>\r\n          <p className=\"current-weather-data-value\">{temp}&#176;</p>\r\n        </span>\r\n        <span className=\"weather-data-property\">\r\n          <p className=\"weather-data-title\">Feels Like</p>\r\n          <p className=\"current-weather-data-value\">{feels_like}&#176;</p>\r\n        </span>\r\n        <span className=\"weather-data-property\">\r\n          <p className=\"weather-data-title\">Conditions</p>\r\n          <p className=\"current-weather-data-value\">{conditions}</p>\r\n        </span>\r\n        <img src={`https://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\nimport CurrentWeatherView from \"./CurrentWeatherView\";\r\n\r\nconst CurrentWeather = ({ currentWeather, city }) => {\r\n  const { temp, weather, feels_like } = currentWeather;\r\n  const conditions = weather[0].main;\r\n  const icon = weather[0].icon;\r\n\r\n  const roundedTemp = Math.round(temp);\r\n  const roundedFeelsLike = Math.round(feels_like);\r\n\r\n  return (\r\n    <>\r\n      {currentWeather ? (\r\n        <CurrentWeatherView\r\n          city={city}\r\n          temp={roundedTemp}\r\n          feels_like={roundedFeelsLike}\r\n          conditions={conditions}\r\n          icon={icon}\r\n        />\r\n      ) : (\r\n        <h2>Sorry city data not available.</h2>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import moment from \"moment-timezone\";\r\n\r\nconst FormatTime = (timestamp, timezone, formatType) => {\r\n  return moment.tz(timestamp * 1000, timezone).format(formatType);\r\n};\r\n\r\nexport default FormatTime;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Accordion = ({ children, title, isExpand = false }) => {\r\n  const [expand, setExpand] = useState(isExpand);\r\n  return (\r\n    <div className=\"box\">\r\n      <div className=\"title-box\" onClick={() => setExpand((expand) => !expand)}>\r\n        <span className=\"title\">{title}</span>\r\n        <span className=\"icon\">\r\n          <i className={`fa fa-play-circle${!expand ? \" down\" : \"\"}`}></i>\r\n        </span>\r\n        <div className=\"clearfix\"></div>\r\n      </div>\r\n      {expand && <div className=\"content\">{children}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Accordion;\r\n","import React from \"react\";\r\nimport FormatTime from \"../utils/FormatTime\";\r\nimport Accordion from \"../components/Accordion\";\r\n\r\nconst DailyWeatherView = ({ dailyWeather, timezone, city }) => {\r\n  const roundTemp = (tempToRound) => {\r\n    return Math.round(tempToRound);\r\n  };\r\n\r\n  const formatTime = (timeToFormat) => {\r\n    return FormatTime(timeToFormat, timezone, \"hA\");\r\n  };\r\n\r\n  const formatDate = (dateToFormat) => {\r\n    return FormatTime(dateToFormat, timezone, \"MM/DD\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"daily-weather-data\">\r\n      <p className=\"daily-weather-tagline\">\r\n        8 Day Forecast |<span className=\"daily-weather-data-city\"> {city}</span>\r\n      </p>\r\n\r\n      <Accordion title={\"Click To View >>\"} isExpand={false}>\r\n        <div className=\"daily-weather-data-box\">\r\n          {dailyWeather &&\r\n            dailyWeather.length > 0 &&\r\n            dailyWeather.map((day, idx) => {\r\n              return (\r\n                <span className=\"daily-weather-data-property\" key={idx}>\r\n                  <p className=\"weather-data-title\">\r\n                    Date | Time | Temp | High | Low | Conditions\r\n                  </p>\r\n                  <p className=\"weather-data-value\">\r\n                    {formatDate(day.dt)} | {formatTime(day.dt)} |{\" \"}\r\n                    {roundTemp(day.temp.day)}&#176; | {roundTemp(day.temp.max)}\r\n                    &#176; | {roundTemp(day.temp.min)}\r\n                    &#176; | {day.weather[0].main}\r\n                    <img\r\n                      className=\"daily-weather-data-icon\"\r\n                      src={`https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\r\n                      alt=\"\"\r\n                    />\r\n                  </p>\r\n                </span>\r\n              );\r\n            })}\r\n        </div>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyWeatherView;\r\n","import React from \"react\";\r\nimport DailyWeatherView from \"./DailyWeatherView\";\r\n\r\nconst DailyWeather = ({ dailyWeather, timezone, city }) => {\r\n  return (\r\n    <DailyWeatherView\r\n      dailyWeather={dailyWeather}\r\n      timezone={timezone}\r\n      city={city}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DailyWeather;\r\n","import React from \"react\";\r\nimport FormatTime from \"../utils/FormatTime\";\r\nimport Accordion from \"../components/Accordion\";\r\n\r\nconst HourlyWeather = ({ hourlyWeather, timezone, city }) => {\r\n  const roundTemp = (tempToRound) => {\r\n    return Math.round(tempToRound);\r\n  };\r\n\r\n  const formatTime = (timeToFormat) => {\r\n    return FormatTime(timeToFormat, timezone, \"hA\");\r\n  };\r\n\r\n  const formatDate = (dateToFormat) => {\r\n    return FormatTime(dateToFormat, timezone, \"MM/DD\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"hourly-weather-data\">\r\n      <p className=\"hourly-weather-tagline\">\r\n        48 Hour Forecast |\r\n        <span className=\"hourly-weather-data-city\"> {city}</span>\r\n      </p>\r\n\r\n      <Accordion title={\"Click To View >>\"} isExpand={false}>\r\n        <div className=\"hourly-weather-data-box\">\r\n          {hourlyWeather.map((hour, idx) => {\r\n            return (\r\n              <span className=\"hourly-weather-data-property\" key={idx}>\r\n                <p className=\"weather-data-title\">\r\n                  Date | Time | Temp | Feels Like | Conditions\r\n                </p>\r\n                <p className=\"weather-data-value\">\r\n                  {formatDate(hour.dt)} | {formatTime(hour.dt)} |{\" \"}\r\n                  {roundTemp(hour.temp)}&#176; | {roundTemp(hour.feels_like)}\r\n                  &#176; | {hour.weather[0].main}\r\n                  <img\r\n                    className=\"daily-weather-data-icon\"\r\n                    src={`https://openweathermap.org/img/wn/${hour.weather[0].icon}@2x.png`}\r\n                    alt=\"\"\r\n                  />\r\n                </p>\r\n              </span>\r\n            );\r\n          })}\r\n        </div>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HourlyWeather;\r\n","import React from \"react\";\r\nimport HourlyWeather from \"./HourlyWeatherView\";\r\n\r\nconst HourlyWeatherList = ({ hourlyWeather, timezone, city }) => {\r\n  return (\r\n    <HourlyWeather\r\n      hourlyWeather={hourlyWeather}\r\n      timezone={timezone}\r\n      city={city}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HourlyWeatherList;\r\n","import React from \"react\";\r\nimport CurrentWeather from \"../views/CurrentWeather\";\r\nimport DailyWeather from \"../views/DailyWeather\";\r\nimport HourlyWeather from \"../views/HourlyWeather\";\r\n\r\nconst Weather = ({ data, city }) => {\r\n  return (\r\n    <>\r\n      {data && (\r\n        <>\r\n          <CurrentWeather currentWeather={data.current} city={city} />\r\n          <DailyWeather dailyWeather={data.daily} city={city} />\r\n          <HourlyWeather hourlyWeather={data.hourly} city={city} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer\">\r\n    <p>\r\n      <a\r\n        href=\"https://openweathermap.org/api/one-call-api\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        powered by openweather.org\r\n      </a>\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../views/layout/Header\";\r\nimport fetchWeatherData from \"../utils/FetchWeatherData\";\r\nimport CitySelector from \"../components/CitySelector\";\r\nimport Weather from \"../components/Weather\";\r\nimport Footer from \"../views/layout/Footer\";\r\n\r\nconst Main = () => {\r\n  const [userLocation, setUserLocation] = useState({\r\n    zip: null,\r\n    name: \"\",\r\n    lat: null,\r\n    lon: null,\r\n  });\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [geolocationLoaded, setGeolocationLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData(userLocation.lat, userLocation.lon, setWeatherData);\r\n  }, [userLocation]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"geolocation loaded\",\r\n      JSON.stringify(geolocationLoaded)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        <Header />\r\n\r\n        <CitySelector\r\n          onSearch={(lat, lon, name) =>\r\n            fetchWeatherData(lat, lon, setWeatherData)\r\n          }\r\n          data={weatherData}\r\n          userLocation={userLocation}\r\n          setUserLocation={setUserLocation}\r\n          geolocationLoaded={geolocationLoaded}\r\n          setGeolocationLoaded={setGeolocationLoaded}\r\n        />\r\n\r\n        {weatherData && <Weather data={weatherData} city={userLocation.name} />}\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Main from \"./Main\";\r\n\r\nconst App = () => {\r\n  return <Main />;\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/styles.css\";\r\nimport App from \"./views/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}